use std::{fs, path::PathBuf, process::Command};
use tap::Pipe;
use typescript_definitions::TypeScriptifyTrait;
use xbase::*;

fn main() {
    let project_root = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    let vscode_root = project_root.join("vscode");
    let ts_out = vscode_root.join("src").join("types.ts");

    let content = if ts_out.exists() {
        fs::read_to_string(&ts_out).expect("types.ts does not exist?")
    } else {
        Default::default()
    };
    let lines: Vec<&str> = content.split('\n').collect();

    let autogenerated_marker = lines
        .iter()
        .position(|line| line.contains("AUTOGENERATED"))
        .unwrap_or_default();

    let mut output = String::from(&lines[0..autogenerated_marker + 1].join("\n")) + "\n";

    output += &server::Request::type_script_ify();

    output += "// Server Requests\n\n";
    output += &server::BuildRequest::type_script_ify();
    output += &server::RunRequest::type_script_ify();
    output += &server::RegisterRequest::type_script_ify();
    output += &server::DropRequest::type_script_ify();
    output += &server::GetProjectInfoRequest::type_script_ify();

    output += "// Server Response\n\n";
    output += &error::ServerError::type_script_ify();
    output += &server::Response::type_script_ify();

    output += "// General Transport types\n\n";
    output += &server::ProjectInfo::type_script_ify();
    output += &types::TargetInfo::type_script_ify();
    output += &server::Runners::type_script_ify();
    output += &types::Operation::type_script_ify();
    output += &types::BuildSettings::type_script_ify();
    output += &types::DeviceLookup::type_script_ify();

    output += "// Broadcast server Messages\n\n";

    output += &broadcast::Message::type_script_ify();
    output += &broadcast::MessageLevel::type_script_ify();
    output += &broadcast::Task::type_script_ify();
    output += &broadcast::StatuslineState::type_script_ify();

    output = output.replace(": Value", ": unknown");
    output = output.replace(": Error", ": ServerError");
    output = output.replace(": PBXTargetPlatform", ": string");
    output = output.replace("};", "}\n\n");

    while output.contains("  ") {
        output = output.replace("  ", " ");
    }
    for _ in 0..5 {
        output = output.replace("\r\n\r\n", "    \n");
    }

    fs::write(&ts_out, output).expect("failed to write typescript types");
    let format_status = vscode_root
        .join("node_modules")
        .join(".bin")
        .join("eslint")
        .pipe(Command::new)
        .current_dir(vscode_root)
        .arg(ts_out)
        .arg("--fix")
        .output()
        .expect("failed to run eslint on ts_out")
        .status;

    assert!(format_status.success(), "eslint failed");
}
