// eslint-disable-next-line @typescript-eslint/no-namespace
export namespace TaskKind {
  export const prefix = (kind: TaskKind) => {
    switch (kind) {
      case TaskKind.Run:
        return { processing: "Running", done: "Ran", value: "Run" };
      case TaskKind.Build:
        return { processing: "Building", done: "Built", value: "Build" };
      case TaskKind.Compile:
        return { processing: "Compiling", done: "Compiled", value: "Compile" };
      case TaskKind.Generate:
        return {
          processing: "Generating",
          done: "Generated",
          value: "Generate",
        };
    }
  };
  export const isRun = (kind: TaskKind) => kind === TaskKind.Run;
  export const isBuild = (kind: TaskKind) => kind === TaskKind.Build;
  export const isGenerate = (kind: TaskKind) => kind === TaskKind.Generate;
  export const isCompile = (kind: TaskKind) => kind === TaskKind.Compile;
}

// AUTOGENERATED

/* Server Requests */

// Requests clinets can make
export type Request =
  | { method: "register"; args: RegisterRequest }
  | { method: "build"; args: BuildRequest }
  | { method: "run"; args: RunRequest }
  | { method: "drop"; args: DropRequest }
  | { method: "get_runners" }
  | { method: "get_project_info"; args: GetProjectInfoRequest };

// Request to build a particular project
export type BuildRequest = {
  root: string;
  settings: BuildSettings;
  operation: Operation;
};

// Request to Run a particular project.
export type RunRequest = {
  root: string;
  settings: BuildSettings;
  device: DeviceLookup | null;
  operation: Operation;
};

// Register a project root
export type RegisterRequest = { root: string };

// Drop a given set of roots to be dropped (i.e. unregistered)
export type DropRequest = { roots: string[] };

// Request to Get `ProjectInfo`
export type GetProjectInfoRequest = { root: string };

/* Server Response */

// Server Error due to failure while processing a `Request
export type ServerError = { kind: string; msg: string };

// Server Response
export type Response = { data: unknown | null; error: ServerError | null };

/* General Transport types */

export type ProjectInfo = {
  watchlist: string[];
  targets: { [key: string]: TargetInfo };
};

// Target specfic information
export type TargetInfo = { platform: string };

// Represntaiton of Project runners index by Platfrom
export type Runners = { [key: string]: DeviceLookup[] };

// Type of operation for building/ruuning a target/scheme
export enum Operation {
  Watch = "Watch",
  Stop = "Stop",
  Once = "Once",
}

// Build Settings used in building/running a target/scheme
export type BuildSettings = {
  target: string;
  configuration: string;
  scheme: string | null;
};

// Device Lookup information to run built project with
export type DeviceLookup = { name: string; id: string };

/* Broadcast server Messages */

// Representation of Messages that clients needs to process
export type Message =
  | { type: "Notify"; args: { content: string; level: ContentLevel } }
  | { type: "Log"; args: { content: string; level: ContentLevel } }
  | { type: "OpenLogger" }
  | { type: "ReloadLspServer" }
  | {
      type: "SetCurrentTask";
      args: { kind: TaskKind; target: string; status: TaskStatus };
    }
  | {
      type: "UpdateCurrentTask";
      args: { content: string; level: ContentLevel };
    }
  | { type: "FinishCurrentTask"; args: { status: TaskStatus } }
  | {
      type: "SetWatching";
      args: { watching: boolean; settings: BuildSettings };
    };

// What a given content level is? for whether to log/show it
export enum ContentLevel {
  Trace = "Trace",
  Debug = "Debug",
  Info = "Info",
  Warn = "Warn",
  Error = "Error",
}

// What kind of task is currently under progress?
export enum TaskKind {
  Build = "Build",
  Run = "Run",
  Compile = "Compile",
  Generate = "Generate",
}

// What the status of task is currently under progress?
export enum TaskStatus {
  Failed = "Failed",
  Succeeded = "Succeeded",
  Processing = "Processing",
}
